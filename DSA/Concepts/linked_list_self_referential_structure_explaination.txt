In C language, a self-referential structure is a structure that has a member that points to the same type of structure. This member essentially creates a "link" or a "reference" to another instance of the same structure type. It is commonly used in the context of linked lists to connect the individual elements of the list.

Let's see an example to illustrate this concept:

```c
struct Node {
    int data;
    struct Node* next; // This member is a pointer to another Node (self-referential)
};
```

In the above example, we have defined a self-referential structure called `Node`. The `struct Node* next` member within the structure is a pointer that points to another `Node` structure.

Linked lists are a data structure used for storing a collection of elements where each element (node) points to the next element in the sequence. The `next` member of each node is used to maintain this linkage, allowing us to traverse the list from one node to the next.

Here's a simple example of a linked list with three nodes:

```
1 -> 2 -> 3 -> NULL
```

In memory, each node contains the `data` and a pointer to the `next` node. The `next` pointer of the last node is typically set to `NULL`, indicating the end of the list.

When you create a linked list in C, you allocate memory for each node dynamically using functions like `malloc`, and then you set the `next` pointer of each node to link them together. This way, you can traverse the list by following the `next` pointers from one node to the next, allowing efficient insertion and deletion operations.

Here's a code snippet illustrating how you might create a simple linked list with three nodes:

```c
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

int main() {
    struct Node* head = NULL;
    struct Node* second = NULL;
    struct Node* third = NULL;

    // Allocate memory for nodes
    head = (struct Node*)malloc(sizeof(struct Node));
    second = (struct Node*)malloc(sizeof(struct Node));
    third = (struct Node*)malloc(sizeof(struct Node));

    // Assign data values and set up the links
    head->data = 1;
    head->next = second;

    second->data = 2;
    second->next = third;

    third->data = 3;
    third->next = NULL; // Mark the end of the list

    // Now you have a linked list: 1 -> 2 -> 3 -> NULL

    // Code to traverse and manipulate the linked list goes here...

    return 0;
}
```

Using a self-referential structure allows you to create dynamic data structures like linked lists, trees, and graphs, where elements need to be interconnected in a flexible manner. This is a powerful feature of C that allows you to represent complex data structures efficiently.